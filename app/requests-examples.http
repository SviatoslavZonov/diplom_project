# примеры API-запросов для Postman

@baseUrl = http://localhost:8000


# Регистрация пользователя

POST {{baseUrl}}/api/auth/register/
Content-Type: application/json

{
  "first_name": "Иван",
  "last_name": "Иванов",
  "email": "ivan@example.com",
  "password": "SecurePass123!"
}

# Проверка: Статус: 201 Created. В ответе должны быть токены (access и refresh). 
# Проверьте почту ivan@example.com — должно прийти письмо с подтверждением.
# {"user": {"first_name": "Иван", "last_name": "Иванов","email": "ivan2563@example.com"},

###


# Авторизация
POST {{baseUrl}}/api/auth/login/
Content-Type: application/json

{
  "email": "ivan@example.com",
  "password": "SecurePass123!"
}

# Проверка: Статус: 200 OK. 
# Необходимо сохранить токен из ответа в переменную окружения token (через скрипт Postman): pm.environment.set("token", pm.response.json().access);

###


# Получение списка товаров
GET {{baseUrl}}/api/products/
Authorization: Bearer {{"token"}}

# Проверка: Статус: 200 OK. Должен быть список товаров из products.yaml.

###


#  Добавление товара в корзину
POST {{baseUrl}}/api/cart/
Content-Type: application/json

{
  "product_id": 1,  // ID товара из списка товаров
  "quantity": 2
}

# Проверка: Статус: 201 Created. Необходимо убедиться, что товар добавлен:
# GET {{base_url}}/api/cart/  Должен вернуть список товаров в корзине.

###


# Создание контакта (адреса доставки)
POST {{baseUrl}}/api/contacts/
Content-Type: application/json

{
  "first_name": "Иван",
  "last_name": "Иванов",
  "email": "ivan@example.com",
  "phone": "79161234567",
  "city": "Москва",
  "street": "Пушкина",
  "house": "101",
  "apartment": "66"
}

# Проверка: Статус: 201 Created.
# GET {{base_url}}/api/contacts/ → Должен вернуть созданный контакт.

###


# Создание заказа
POST {{baseUrl}}/api/orders/
Authorization: Bearer {{"token"}}

{
    "contact": 1  // ID контакта
}

# Проверка: Статус: 201 Created. В ответе должен быть заказ с полем total_price. Корзина должна очиститься:
# GET {{base_url}}/api/cart/ → Пустой список.
# Проверьте почту — должно прийти письмо с деталями заказа.

###


# Подтверждение заказа
POST {{baseUrl}}/api/orders/1/confirm/
# POST {{baseUrl}}/api/orders/("ID заказа")/confirm/
# Проверка: Статус: 200 OK. 
# GET {{base_url}}/api/orders/1/ → Статус заказа должен быть processing.
# Проверьте почту — письмо о подтверждении.

###


# Получение истории заказов
GET {{baseUrl}}/api/orders/history/

# Проверка: Статус: 200 OK. Должен быть список всех заказов пользователя.

###


## Проверка ошибок

# 1.Попытка регистрации с существующим email: Повторите шаг с Регистрацией пользователя 
# Результат: ошибка 400. "Email уже используется".

POST {{baseUrl}}/api/auth/register/
Content-Type: application/json

{
  "first_name": "Иван",
  "last_name": "Иванов",
  "email": "ivan@example.com",
  "password": "SecurePass123!"
}


# 2.Добавление товара с quantity = 0:

POST {{baseUrl}}/api/cart/
Content-Type: application/json

{
  "product_id": 1,
  "quantity": 0
}

# Статус: 400 Bad Request. Результат: "Убедитесь, что это значение больше либо равно 1."


# 3.Создание заказа без контакта:
# Удалите контакт, например ID 1 

DELETE {{baseUrl}}/api/contacts/1/

POST {{baseUrl}}/api/orders/
Authorization: Bearer {{"token"}}

{
    "contact": 1  // ID контакта
}

# Статус: 400 Bad Request. Результат: Ошибка "Контакт не указан".


# 4.Дублирование товара в корзине. Ошибка unique_together.

# 5.Создание заказа без контакта.  Ошибка "Контакт не указан".
